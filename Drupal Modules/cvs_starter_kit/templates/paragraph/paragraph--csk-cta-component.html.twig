{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{# Set the link target class. If none specified use _self #}
{% set cta_target = '_self' %}
{% if content.field_csk_open_in_new_tab.0 is not null %}
  {% if content.field_csk_open_in_new_tab.0['#markup'] == 'On' %}
    {% set cta_target = '_blank' %}
  {% endif %}
{% endif %}

{# Set the link styles. If none specified use adaptive button. #}
{% if content.field_csk_link_style.0 is not null %}
  {% set link_style = content.field_csk_link_style.0['#markup'] %}
{% else %}
  {% set link_style = 'adaptive_btn' %}
{% endif %}

{# Set the cta alignment. If no specified use left #}
{% if content.field_csk_text_align.0 is not null %}
  {% set text_align = content.field_csk_text_align.0['#markup'] %}
{% else %}
  {% set text_align = 'align-left' %}
{% endif %}

{# Set the cta role. If no specified use link #}
{% if content.field_csk_link_role.0 is not null %}
  {% set cta_role = content.field_csk_link_role.0['#markup'] %}
{% else %}
  {% set cta_role = 'link' %}
{% endif %}

{# Set the top padding. If none specified use 0px. #}
{% if content.field_csk_padding_top.0 is not null %}
  {% set padding_top = content.field_csk_padding_top.0['#markup'] %}
{% else %}
  {% set padding_top = 'padding-top-0' %}
{% endif %}

{# Set the left padding. If none specified use 0px. #}
{% if content.field_csk_padding_left.0 is not null %}
  {% set padding_left = content.field_csk_padding_left.0['#markup'] %}
{% else %}
  {% set padding_left = 'padding-left-0' %}
{% endif %}

{# Set the right padding. If none specified use 0px. #}
{% if content.field_csk_padding_right.0 is not null %}
  {% set padding_right = content.field_csk_padding_right.0['#markup'] %}
{% else %}
  {% set padding_right = 'padding-right-0' %}
{% endif %}

{# Set the bottom padding. If none specified use 0px. #}
{% if content.field_csk_padding_bottom.0 is not null %}
  {% set padding_bottom = content.field_csk_padding_bottom.0['#markup'] %}
{% else %}
  {% set padding_bottom = 'padding-bottom-0' %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    padding_top,
    padding_left,
    padding_right,
    padding_bottom,
    text_align
  ]
%}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      {% if content.field_csk_call_to_action.0 is not null %}
        {% if link_style == 'adaptive_btn' %}
          <div class="cta-link-container">
            {% if cta_role == 'link' %}
              <a 
                href="{{ content.field_csk_call_to_action.0['#url_title'] }}"
                target="{{ cta_target }}"
                class="{{ link_style }}"
              >
                {{ content.field_csk_call_to_action.0['#title'] }}
              </a>
            {% else %}
              <a 
                href="{{ content.field_csk_call_to_action.0['#url_title'] }}"
                target="{{ cta_target }}"
                class="{{ link_style }}"
                role="button"
              >
                {{ content.field_csk_call_to_action.0['#title'] }}
              </a>
            {% endif %}
          </div>
        {% else %}
          {% if cta_role == 'link' %}
            <a 
              href="{{ content.field_csk_call_to_action.0['#url_title'] }}"
              target="{{ cta_target }}"
              class="{{ link_style }}"
            >
              {{ content.field_csk_call_to_action.0['#title'] }}
            </a>
          {% else %}
            <a 
              href="{{ content.field_csk_call_to_action.0['#url_title'] }}"
              target="{{ cta_target }}"
              class="{{ link_style }}"
              role="button"
            >
              {{ content.field_csk_call_to_action.0['#title'] }}
            </a>
            {% endif %}
        {% endif %}
      {% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
